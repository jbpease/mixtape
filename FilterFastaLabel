#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FILTER FASTA LABEL
James B. Pease
"""

import sys
import argparse
import os
from mixcore import fasta_text_iter

_LICENSE = """
http://www.github.org/jbpease/mixtape
MixTAPE: Mix of Tools for Analysis in Phylogenetics and Evolution

This file is part of MixTAPE.

MixTAPE is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MixTAPE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MixTAPE.  If not, see <http://www.gnu.org/licenses/>.
"""



def generate_argparser():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        epilog=_LICENSE)
    parser.add_argument('fasta', nargs='?', type=argparse.FileType('r'),
                        default=sys.stdin,
                        help="input fasta file")
    parser.add_argument("--labels", nargs=1,
                        help="file containing labels (one-per-line)", required=True)
    parser.add_argument('--out', type=os.path.abspath,
                        default=sys.stdout, help="output fasta file")
    return parser



def main(arguments=sys.argv[1:]):
    """Main method"""
    arguments = arguments if arguments is not None else sys.argv[1:]
    parser = generate_argparser() 
    args = parser.parse_args(args=arguments)
    labels = []
    with open(args.labels[0], 'r') as lblfile:
        for line in lblfile:
            labels.append(line.strip())
    for header, seq in fasta_text_iter(args.fasta):
        if header in labels:
            print(">{}\n{}".format(header, seq), file=args.out)
    return ''


if __name__ == "__main__":
    main()
