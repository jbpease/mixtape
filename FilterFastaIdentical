#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FILTER FASTA LABEL
James B. Pease
"""

import sys
import argparse
import os
from mixcore import fasta_text_iter

_LICENSE = """
http://www.github.org/jbpease/mixtape
MixTAPE: Mix of Tools for Analysis in Phylogenetics and Evolution

This file is part of MixTAPE.

MixTAPE is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MixTAPE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MixTAPE.  If not, see <http://www.gnu.org/licenses/>.
"""



def generate_argparser():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        epilog=_LICENSE)
    parser.add_argument('fasta', nargs='?', type=argparse.FileType('r'),
                        default=sys.stdin,
                        help="input fasta file")
    parser.add_argument("--dup", nargs=1,
                        help="output the duplicate sequences to this file")
    parser.add_argument('--out', type=os.path.abspath,
                        default=sys.stdout, help="output fasta file")
    parser.add_argument("--ignore-gap", action="store_true")
    return parser



def main(arguments=sys.argv[1:]):
    """Main method"""
    arguments = arguments if arguments is not None else sys.argv[1:]
    parser = generate_argparser() 
    args = parser.parse_args(args=arguments)
    labels = []
    unique = ([])
    if args.ignore_gap is False:
        for header, seq in fasta_text_iter(args.fasta):
            if seq in unique:
                if args.dup is not None:
                    print(">{}\n{}".format(header, seq), file=args.dup)
                    continue
            unique.update([seq])
            print(">{}\n{}".format(header, seq), file=args.out)
    else:
        lengths = {}
        seqs = []
        dups = set([])
        for header, seq in fasta_text_iter(args.fasta):
            seqs.append((header, seq))
        for i, (h0, s0) in enumerate(seqs):
            if i in dups:
                continue
            for j, (h1, s1) in enumerate(seqs):
                if j <= i:
                    continue
                if j in dups:
                    continue
                if all(s0[x] == s1[x] or s1[x] == '-' or s0[x] == '-' for x in range(len(s0))):
                    if len(s1) - s1.count("-") > len(s0) - s0.count("-"):
                        dups.update((i,))
                        break
                    else:
                        dups.update((j,))
        for i, (h0, s0) in enumerate(seqs):
            if i in dups:
                if args.dup is not None:
                    print(">{}\n{}".format(h0, s0), file=args.dup)
            else:
                print(">{}\n{}".format(h0, s0), file=args.out)


    return ''


if __name__ == "__main__":
    main()
