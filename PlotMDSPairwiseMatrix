#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8

"""
Plot an MDS from Pairwise Matrix
James B. Pease
"""

import os
import sys
import argparse
import numpy as np
from sklearn.manifold import MDS
from matplotlib import pyplot as plt, cm, colors
from mixcore import CSVfile

_LICENSE = """
http://www.github.org/jbpease/mixtape
MixTAPE: Mix of Tools for Analysis in Phylogenetics and Evolution

This file is part of MixTAPE.

MixTAPE is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MixTAPE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MixTAPE.  If not, see <http://www.gnu.org/licenses/>.
"""




def generate_argparser():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        epilog=_LICENSE)
    parser.add_argument('pwdist', nargs='?', type=os.path.abspath,
                        default=sys.stdin,
                        help="input pairwise matrix")
    parser.add_argument("--tsv", action="store_true",
                        help="tab-delimited (default:comma-delimited)")
    parser.add_argument("--labeldelim",
                        help="label delimeter")
    parser.add_argument("--labelfield",
                        help="label delimited fields")
    parser.add_argument("--groupfield", type=int,
                        help="label delimited field for the group for the key")
    parser.add_argument('--out', type=os.path.abspath,
                        default=sys.stdout, help="output fasta file")
    parser.add_argument('--figsize', type=float, nargs=2,
                        help="fixed height/width in inches for figure")
    return parser


def main(arguments=None):
    arguments = arguments if arguments is not None else sys.argv[1:]
    parser = generate_argparser()
    args = parser.parse_args(args=arguments)
    csvfile = CSVfile(args.pwdist, delimiter="," if args.tsv is False else "\t")
    nseqs = len(csvfile.colheaders) - 1
    arr = np.zeros((nseqs, nseqs))
    cmap = cm.tab20
    norm = colors.Normalize(vmin=1, vmax=20)
    if args.figsize is not None: 
        fig = plt.figure(figsize=(args.figsize[0], args.figsize[1]), )
    else:
        fig = plt.figure()
    ax1 = fig.add_subplot(111)
    i = 0
    for entry in csvfile:
        #print(entry)
        for j in range(1, len(entry)):
            arr[i][j - 1] = float(entry[j])
            arr[j - 1][i] = float(entry[j])
        i += 1
    mds = MDS(n_components=2, dissimilarity='precomputed') #, max_iter=10000)
    results = mds.fit(arr)
    coords = results.embedding_
    # if args.groupfield is not None:
    rep = set([])
    for label, x, y in zip(csvfile.colheaders[1:], coords[:, 0], coords[:, 1]):
        grplabel = "_nolegend_"
        if args.labeldelim is not None:
            label = label.split(args.labeldelim)
            if args.groupfield is not None:
                grplabel = label[int(args.groupfield)]
            label = args.labeldelim.join([label[int(x)] for x in args.labelfield.split(',')])
            ax1.scatter(x, y, marker='o', s=3, c=cmap(
                norm(int(grplabel[1:]) if (args.groupfield is not None and grplabel[-1] != 'x') else 0)),
                    label=grplabel if (
                        grplabel is not None and grplabel not in rep
                        ) else "_nolegend_")
        ax1.annotate(
            # "-".join(label.split("-")[1:3]),
            label, xy=(x, y), xytext=(-1, 1), size="4",
                 textcoords='offset points', ha='right', va='bottom')
        if grplabel not in rep:
            rep.update([grplabel])
    # plt.show()
    ax1.legend(prop={'size': 4})
    plt.tight_layout()
    plt.savefig(args.out)
    return ''


if __name__ == '__main__':
    main()
