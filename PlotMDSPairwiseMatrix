#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8

"""
Plot an MDS from Pairwise Matrix
James B. Pease
"""

import os
import sys
import argparse
from mixcore import CSVfile

_LICENSE = """
http://www.github.org/jbpease/mixtape
MixTAPE: Mix of Tools for Analysis in Phylogenetics and Evolution

This file is part of MixTAPE.

MixTAPE is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MixTAPE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MixTAPE.  If not, see <http://www.gnu.org/licenses/>.
"""


def generate_argparser():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        epilog=_LICENSE)
    parser.add_argument('pwdist', nargs='?', type=argparse.FileType('r'),
                        default=sys.stdin,
                        help="input pairwise matrix")
    parser.add_argument("--tsv", action="store_true",
                        help="tab-delimited (default:comma-delimited)")
    parser.add_argument('--out', type=os.path.abspath,
                        default=sys.stdout, help="output fasta file")
    return parser


def main(arguments=None):
    arguments = arguments if arguments is not None else sys.argv[1:]
    parser = generate_argparser()
    args = parser.parse_args(args=arguments)
    csvfile = CSVfile(args.pwdist, delimiter="," if args.tsv is False else "\t"):
    nseqs = len(csvfile.headers) - 1
    arr = np.zeros((nseqs, nseqs))
    i = 0
    for entry in csvfile:
        for j in range(1, len(entry)):
            arr[i][j - 1] = float(entry[j])
            arr[j - 1][i] = float(entry[j])
    mds = MDS(n_components=2, dissimilarity='precomputed', max_iter=10000)
    results = mds.fit(arr)
    coords = results.embedding_
    plt.subplots_adjust(bottom=0.1)
    reps = set()
    for label, x, y in zip(all_seqs, coords[:, 0], coords[:, 1]):
        plt.scatter(x, y, marker='o', edgecolors='k', facecolors='none')
        plt.annotate(grps[label],
                     xy=(x, y), xytext=(-1, 1), size="4",
                     textcoords='offset points', ha='right', va='bottom')
    # plt.show()
    # plt.legend()
    plt.savefig(args.out)
    return ''


if __name__ == '__main__':
    main()
